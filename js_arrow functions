Arrow Functions:
-->ES6 version
-->more readable and structure
-->anonymous functions(lambda functions)
-->without function name but they are assigned to a variable
E.g:
Arrow Functions without parameters:
let c=()=>{
console.log("hi dimple")
}
c()

Arrow Functions with parameters:
E.g:
let x=(x,y)=>{
console.log(x+y)
}
x(20,30)
x(40,50)

Arrow Function with one argument

let greet=x=>console.log(x);
greet('hello')

Arrow Function without argument
let greet=()=>console.log("hello");
greet()

E.x: Arrow Functions as an expression
let 18;
let welcome=(age<18)?
()=>console.log('hi dimple'):
()=>console.log('hi vinnu');
welcome()


Synchronous and asynchronous:
-->step by step
-->one task

E.g:

function task1(){
            console.log("Task1: Start")
            }
            function task2(){
            console.log("Task2: Start")
            }
            function task3(){
            console.log("Task3: Start")
            }
            task1()
            task2()
            task3()


asynchronous functions:
-->multiple taska at a time

console.log("hi dimple");
            setTimeout(() =>{
                console.log("hi iam waiting")
            },5000);
            console.log("iam in lab")



javascript callbacks:
a callback function is a function that is passed argument to another function;
E.g:

function greet(name,callback){
console.log(`hello,${name}!`)
callback();
}
//this calls the callback function after greeting
function saygoodbye(){
console.log("goodbye")
} 
//call greet and pass saygoodbye as the callback
greet("dimple",saygoodbye)

