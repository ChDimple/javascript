promises:
-->A promise is a special JavaScript object that represents the eventual completion(or failure) of an asynchronous operation.
->it allow us to handle asynchronous tasks more efficiently than callbacks.

Three states:
1)Pending: The initial state ,the promise is still waiting for the operation to finish 
2)fulfilled: The operation completed successfully 
3)Rejected:The operation failed.

exp:
1)To create a promise - new promise()
two parameters-
resolve --to mark the promise as successfully
reject -- mark it as failed 

2)handling the result:
.then() method is called when promise is fulfilled.
it will receives the result from resolve()
.catch() method is called if the promise is rejected it receives the error  message from reject()


e.g:
let mypromise = new Promise((resolve,reject)=>{
let success=true;
if(success){
resolve("the operation is successfull");
}else{
reject("The operation failed");
}
});
mypromise
.then(result=>{
console.log(result);
})
.catch(error=>{
console.log(error);
});


chaining promises:
e.g:

let promise=new Promise((resolve ,reject) =>{
resolve(5);
//initial resolve value is 5
})
promise
.then(result =>{
console.log(result);
return result *2
//return a new value
})
.then(result =>{
console.log(result);
return result +3
//return a new value 
})
.then(result =>{
console.log(result);
})
.catch(error =>{
console.log("error" ,error)
});
 

e.g: promise with setTimeout
-->asynchronous task using setTimeOut, and the promise will resolve after a certain amount of time

e.g:
let fetchData = new Promise((resolve ,reject)=>{
let dataFetched =true;
setTimeout(() =>{
if(dataFetched){
resolve("data fetched successfully")
}else{
Reject("data fetching failed") 
}
},2000)
})
fetchData
.then(result =>{
console.log(result)
});
